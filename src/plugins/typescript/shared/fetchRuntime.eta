import type {
  IDefaultObject,
  ApiClientConfig,
  ApiClientMethod,
  ApiClientParams,
} from "./apiClientBase";
import { generateURL } from "./apiClientBase";
<% if (it.platform === "wechat") { %>
import { request } from "./wechat";
<% } else if (it.platform === 'fetch') { %>
import { request } from "./fetch";
<% } else { %>
import { createAxios, request } from "./axios";
<% } %>

let apiClientInstance: ApiClientConfig = {};

export const createApiClient = (
  config: Omit<ApiClientConfig, "url" | "signal" | "config">,
) => {
  apiClientInstance = config;
<% if (it.platform === "axios") { %>
  createAxios(config);
<% } %>
};

export const fetchRuntime = <T>(
  url: string,
  method: ApiClientMethod,
  req?: ApiClientParams,
  config?: ApiClientConfig,
) => {
  const _url = generateURL(url, req?.path as unknown as IDefaultObject);

  apiClientInstance.url = _url;
  apiClientInstance.method = method;
  apiClientInstance.params = req;
  apiClientInstance.config = config;

  return request<T>(apiClientInstance);
};

/**
 * @deprecated Planned to be removed in `v1.7.0`
 * 
 * 1.`webClient.create` is modified to `createApiClient`
 *
 * 2.`webClient.request` modified to `fetchRuntime`
 */
export class ApiClient {
  static create (config: Omit<ApiClientConfig, "url" | "signal" | "config">) {
    createApiClient(config);
  }

  static request<T>(
    url: string,
    method: ApiClientMethod,
    req?: ApiClientParams,
    config?: ApiClientConfig,
  ) {
    return fetchRuntime<T>(url, method, req, config);
  }
}

export default ApiClient;
