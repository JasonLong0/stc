import type {
  IDefaultObject,
  WebClientConfig,
  WebClientMethod,
  WebClientParams,
} from "./webClientBase.ts";
import { generateURL } from "./webClientBase.ts";
<% if (it.platform === "wechat") { %>
import { request } from "./wechat/index.ts";
<% } else { %>
import { createAxios, request } from "./axios/index.ts";
<% } %>

let webClientInstance: WebClientConfig;

export const createWebClient = (
  config: Omit<WebClientConfig, "url" | "signal" | "config">,
) => {
  webClientInstance = config;
<% if (it.platform === "axios") { %>
  createAxios(config);
<% } %>
};

export const fetchRuntime = <T>(
  url: string,
  method: WebClientMethod,
  req?: WebClientParams,
  config?: WebClientConfig,
) => {
  const _url = generateURL(url, req?.path as unknown as IDefaultObject);

  webClientInstance.url = _url;
  webClientInstance.method = method;
  webClientInstance.params = req;
  webClientInstance.config = config;

  return request<T>(webClientInstance);
};

export class WebClient {
  static create (config: Omit<WebClientConfig, "url" | "signal" | "config">) {
    createWebClient(config);
  }

  static request<T>(
    url: string,
    method: WebClientMethod,
    req?: WebClientParams,
    config?: WebClientConfig,
  ) {
    return fetchRuntime<T>(url, method, req, config);
  }
}

export default WebClient;
