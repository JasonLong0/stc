import type {
  ApiClientConfig,
  ApiClientMethod,
  ApiClientParams,
  IDefaultObject
} from "./apiClientBase";
import { generateURL } from "./apiClientBase";
import { <% if (it.client === 'axios') { %> createAxios, <% } %>request } from "./<%= it.client %>";

let apiClientConfig: ApiClientConfig = {};

export const createApiClient = (
  config: Omit<ApiClientConfig, "url" | "signal" | "config">,
): void => {
  apiClientConfig = config;
<% if (it.client === "axios") { %>
  createAxios(config);
<% } %>
};

export const fetchRuntime = <T>(
  url: string,
  method: ApiClientMethod,
  req?: ApiClientParams,
  config?: ApiClientConfig,
): Promise<T> => {
  const _url = generateURL(url, req?.path as unknown as IDefaultObject);

  apiClientConfig.url = _url;
  apiClientConfig.method = method;
  apiClientConfig.params = req;
  apiClientConfig.config = config;

  return request<T>(apiClientConfig);
};

/**
 * 1.`webClient.create` is modified to `createApiClient`
 *
 * 2.`webClient.request` modified to `fetchRuntime`
 */
export class ApiClient {
  static create (config: Omit<ApiClientConfig, "url" | "signal" | "config">): void {
    createApiClient(config);
  }

  static request<T>(
    url: string,
    method: ApiClientMethod,
    req?: ApiClientParams,
    config?: ApiClientConfig,
  ): Promise<T> {
    return fetchRuntime<T>(url, method, req, config);
  }
}

export default ApiClient;
